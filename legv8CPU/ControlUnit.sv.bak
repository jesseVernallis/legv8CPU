`include "headers/control.svh"
`include "headers/bus.svh"
`include "headers/aluop.svh"
`include "headers/opcode.svh"


 module ControlUnit (input logic[`OPCODESIZE - 1:0] opcode,
 output logic [`CONTROLSIZE - 1:0] control,
 output logic [`ALUOPSIZE - 1:0] alu_op,
 output logic [1:0] branch_op);
 
 //the type of opcode for this instuction
 logic op_br, op_bcond, op_bl, op_cb, op_b, op_r, op_shift,
 op_i, op_ldur, op_stur;
 //intermediatry control signals
 logic op_branch_imm, setflags;
 logic [5:0] ri_upper_lower;

 always_comb begin
	//use mask to detrmine type
	op_br    = opcode == `BR_BITSET;
	op_bcond = (opcode & `BCOND_MASK) == `B_BITSET;
	op_bl    = (opcode & `BL_MASK) == `BL_BITSET;
	op_cb    = (opcode & `CB_MASK) == `CB_BITSET;
	op_b     = (opcode & `B_MASK) == `B_BITSET;
	op_r     = (opcode & `R_MASK) == `R_BITSET;
	op_shift = (opcode & `SHIFT_MASK) == `SHIFT_BITSET;
	op_i     = (opcode & `I_MASK) == `I_BITSET;
	op_ldur  = (opcode & `LDUR_MASK) == `LDUR_BITSET;
	op_stur  = (opcode & `STUR_MASK) == `STUR_BITSET;
	//if branch requires immediate
	op_branch_imm = op_bcond | op_bl | op_cb | op_b;
	
	//if flags must be set
	ri_upper_lower = {opcode[`OPCODESIZE-1:`OPCODESIZE-3],opcode[3:1]};

	/******************
	SET CONTROL SIGNALS
	*******************/
	case(ri_upper_lower)
	 `ANDS   : setflags = 1'b1; 
	 `ADDS   : setflags = 1'b1;
	 `SUBS   : setflags = 1'b1;
	 default : setflags = 1'b0; 
	endcase
	
	//op type used to set control signals
	control[`REG2LOC]  = op_cb | op_ldur | op_stur;
	control[`ALUSRC]   = op_ldur | op_stur | op_i | op_branch_imm;
	control[`SETFLAGS] = (op_i | op_r) & setflags;
	control[`MEMREAD]  = op_ldur;
	control[`MEMWRITE] = op_bl;
	control[`MEMTOREG] = op_stur;
	control[`PCTOREG] = op_ldur;
	control[`REGWRITE] = op_bl | op_ldur | op_r | op_i | op_shift;
 end
endmodule : ControlUnit
